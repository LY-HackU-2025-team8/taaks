/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './app/routes/__root'
import { Route as RegisterImport } from './app/routes/register'
import { Route as AuthImport } from './app/routes/_auth'
import { Route as AppImport } from './app/routes/_app'
import { Route as IndexImport } from './app/routes/index'
import { Route as RegisterNicknameImport } from './app/routes/register/nickname'
import { Route as RegisterHairImport } from './app/routes/register/hair'
import { Route as RegisterColorImport } from './app/routes/register/color'
import { Route as RegisterClothesImport } from './app/routes/register/clothes'
import { Route as RegisterBuddyNameImport } from './app/routes/register/buddy-name'
import { Route as AuthLoginImport } from './app/routes/_auth/login'
import { Route as AppTabTopPagesImport } from './app/routes/_app/_tab-top-pages'
import { Route as AppTodoTaskIdImport } from './app/routes/_app/todo/$taskId'
import { Route as AppDiaryNewImport } from './app/routes/_app/diary/new'
import { Route as AppTabTopPagesTodoImport } from './app/routes/_app/_tab-top-pages/todo'
import { Route as AppTabTopPagesSettingsImport } from './app/routes/_app/_tab-top-pages/settings'
import { Route as AppTabTopPagesDiaryImport } from './app/routes/_app/_tab-top-pages/diary'
import { Route as AppTabTopPagesDashboardImport } from './app/routes/_app/_tab-top-pages/dashboard'
import { Route as AppTabTopPagesBuddyImport } from './app/routes/_app/_tab-top-pages/buddy'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RegisterNicknameRoute = RegisterNicknameImport.update({
  id: '/nickname',
  path: '/nickname',
  getParentRoute: () => RegisterRoute,
} as any)

const RegisterHairRoute = RegisterHairImport.update({
  id: '/hair',
  path: '/hair',
  getParentRoute: () => RegisterRoute,
} as any)

const RegisterColorRoute = RegisterColorImport.update({
  id: '/color',
  path: '/color',
  getParentRoute: () => RegisterRoute,
} as any)

const RegisterClothesRoute = RegisterClothesImport.update({
  id: '/clothes',
  path: '/clothes',
  getParentRoute: () => RegisterRoute,
} as any)

const RegisterBuddyNameRoute = RegisterBuddyNameImport.update({
  id: '/buddy-name',
  path: '/buddy-name',
  getParentRoute: () => RegisterRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const AppTabTopPagesRoute = AppTabTopPagesImport.update({
  id: '/_tab-top-pages',
  getParentRoute: () => AppRoute,
} as any)

const AppTodoTaskIdRoute = AppTodoTaskIdImport.update({
  id: '/todo/$taskId',
  path: '/todo/$taskId',
  getParentRoute: () => AppRoute,
} as any)

const AppDiaryNewRoute = AppDiaryNewImport.update({
  id: '/diary/new',
  path: '/diary/new',
  getParentRoute: () => AppRoute,
} as any)

const AppTabTopPagesTodoRoute = AppTabTopPagesTodoImport.update({
  id: '/todo',
  path: '/todo',
  getParentRoute: () => AppTabTopPagesRoute,
} as any)

const AppTabTopPagesSettingsRoute = AppTabTopPagesSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppTabTopPagesRoute,
} as any)

const AppTabTopPagesDiaryRoute = AppTabTopPagesDiaryImport.update({
  id: '/diary',
  path: '/diary',
  getParentRoute: () => AppTabTopPagesRoute,
} as any)

const AppTabTopPagesDashboardRoute = AppTabTopPagesDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppTabTopPagesRoute,
} as any)

const AppTabTopPagesBuddyRoute = AppTabTopPagesBuddyImport.update({
  id: '/buddy',
  path: '/buddy',
  getParentRoute: () => AppTabTopPagesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_app/_tab-top-pages': {
      id: '/_app/_tab-top-pages'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppTabTopPagesImport
      parentRoute: typeof AppImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/register/buddy-name': {
      id: '/register/buddy-name'
      path: '/buddy-name'
      fullPath: '/register/buddy-name'
      preLoaderRoute: typeof RegisterBuddyNameImport
      parentRoute: typeof RegisterImport
    }
    '/register/clothes': {
      id: '/register/clothes'
      path: '/clothes'
      fullPath: '/register/clothes'
      preLoaderRoute: typeof RegisterClothesImport
      parentRoute: typeof RegisterImport
    }
    '/register/color': {
      id: '/register/color'
      path: '/color'
      fullPath: '/register/color'
      preLoaderRoute: typeof RegisterColorImport
      parentRoute: typeof RegisterImport
    }
    '/register/hair': {
      id: '/register/hair'
      path: '/hair'
      fullPath: '/register/hair'
      preLoaderRoute: typeof RegisterHairImport
      parentRoute: typeof RegisterImport
    }
    '/register/nickname': {
      id: '/register/nickname'
      path: '/nickname'
      fullPath: '/register/nickname'
      preLoaderRoute: typeof RegisterNicknameImport
      parentRoute: typeof RegisterImport
    }
    '/_app/_tab-top-pages/buddy': {
      id: '/_app/_tab-top-pages/buddy'
      path: '/buddy'
      fullPath: '/buddy'
      preLoaderRoute: typeof AppTabTopPagesBuddyImport
      parentRoute: typeof AppTabTopPagesImport
    }
    '/_app/_tab-top-pages/dashboard': {
      id: '/_app/_tab-top-pages/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppTabTopPagesDashboardImport
      parentRoute: typeof AppTabTopPagesImport
    }
    '/_app/_tab-top-pages/diary': {
      id: '/_app/_tab-top-pages/diary'
      path: '/diary'
      fullPath: '/diary'
      preLoaderRoute: typeof AppTabTopPagesDiaryImport
      parentRoute: typeof AppTabTopPagesImport
    }
    '/_app/_tab-top-pages/settings': {
      id: '/_app/_tab-top-pages/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppTabTopPagesSettingsImport
      parentRoute: typeof AppTabTopPagesImport
    }
    '/_app/_tab-top-pages/todo': {
      id: '/_app/_tab-top-pages/todo'
      path: '/todo'
      fullPath: '/todo'
      preLoaderRoute: typeof AppTabTopPagesTodoImport
      parentRoute: typeof AppTabTopPagesImport
    }
    '/_app/diary/new': {
      id: '/_app/diary/new'
      path: '/diary/new'
      fullPath: '/diary/new'
      preLoaderRoute: typeof AppDiaryNewImport
      parentRoute: typeof AppImport
    }
    '/_app/todo/$taskId': {
      id: '/_app/todo/$taskId'
      path: '/todo/$taskId'
      fullPath: '/todo/$taskId'
      preLoaderRoute: typeof AppTodoTaskIdImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppTabTopPagesRouteChildren {
  AppTabTopPagesBuddyRoute: typeof AppTabTopPagesBuddyRoute
  AppTabTopPagesDashboardRoute: typeof AppTabTopPagesDashboardRoute
  AppTabTopPagesDiaryRoute: typeof AppTabTopPagesDiaryRoute
  AppTabTopPagesSettingsRoute: typeof AppTabTopPagesSettingsRoute
  AppTabTopPagesTodoRoute: typeof AppTabTopPagesTodoRoute
}

const AppTabTopPagesRouteChildren: AppTabTopPagesRouteChildren = {
  AppTabTopPagesBuddyRoute: AppTabTopPagesBuddyRoute,
  AppTabTopPagesDashboardRoute: AppTabTopPagesDashboardRoute,
  AppTabTopPagesDiaryRoute: AppTabTopPagesDiaryRoute,
  AppTabTopPagesSettingsRoute: AppTabTopPagesSettingsRoute,
  AppTabTopPagesTodoRoute: AppTabTopPagesTodoRoute,
}

const AppTabTopPagesRouteWithChildren = AppTabTopPagesRoute._addFileChildren(
  AppTabTopPagesRouteChildren,
)

interface AppRouteChildren {
  AppTabTopPagesRoute: typeof AppTabTopPagesRouteWithChildren
  AppDiaryNewRoute: typeof AppDiaryNewRoute
  AppTodoTaskIdRoute: typeof AppTodoTaskIdRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppTabTopPagesRoute: AppTabTopPagesRouteWithChildren,
  AppDiaryNewRoute: AppDiaryNewRoute,
  AppTodoTaskIdRoute: AppTodoTaskIdRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface RegisterRouteChildren {
  RegisterBuddyNameRoute: typeof RegisterBuddyNameRoute
  RegisterClothesRoute: typeof RegisterClothesRoute
  RegisterColorRoute: typeof RegisterColorRoute
  RegisterHairRoute: typeof RegisterHairRoute
  RegisterNicknameRoute: typeof RegisterNicknameRoute
}

const RegisterRouteChildren: RegisterRouteChildren = {
  RegisterBuddyNameRoute: RegisterBuddyNameRoute,
  RegisterClothesRoute: RegisterClothesRoute,
  RegisterColorRoute: RegisterColorRoute,
  RegisterHairRoute: RegisterHairRoute,
  RegisterNicknameRoute: RegisterNicknameRoute,
}

const RegisterRouteWithChildren = RegisterRoute._addFileChildren(
  RegisterRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AppTabTopPagesRouteWithChildren
  '/register': typeof RegisterRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/register/buddy-name': typeof RegisterBuddyNameRoute
  '/register/clothes': typeof RegisterClothesRoute
  '/register/color': typeof RegisterColorRoute
  '/register/hair': typeof RegisterHairRoute
  '/register/nickname': typeof RegisterNicknameRoute
  '/buddy': typeof AppTabTopPagesBuddyRoute
  '/dashboard': typeof AppTabTopPagesDashboardRoute
  '/diary': typeof AppTabTopPagesDiaryRoute
  '/settings': typeof AppTabTopPagesSettingsRoute
  '/todo': typeof AppTabTopPagesTodoRoute
  '/diary/new': typeof AppDiaryNewRoute
  '/todo/$taskId': typeof AppTodoTaskIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AppTabTopPagesRouteWithChildren
  '/register': typeof RegisterRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/register/buddy-name': typeof RegisterBuddyNameRoute
  '/register/clothes': typeof RegisterClothesRoute
  '/register/color': typeof RegisterColorRoute
  '/register/hair': typeof RegisterHairRoute
  '/register/nickname': typeof RegisterNicknameRoute
  '/buddy': typeof AppTabTopPagesBuddyRoute
  '/dashboard': typeof AppTabTopPagesDashboardRoute
  '/diary': typeof AppTabTopPagesDiaryRoute
  '/settings': typeof AppTabTopPagesSettingsRoute
  '/todo': typeof AppTabTopPagesTodoRoute
  '/diary/new': typeof AppDiaryNewRoute
  '/todo/$taskId': typeof AppTodoTaskIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/register': typeof RegisterRouteWithChildren
  '/_app/_tab-top-pages': typeof AppTabTopPagesRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/register/buddy-name': typeof RegisterBuddyNameRoute
  '/register/clothes': typeof RegisterClothesRoute
  '/register/color': typeof RegisterColorRoute
  '/register/hair': typeof RegisterHairRoute
  '/register/nickname': typeof RegisterNicknameRoute
  '/_app/_tab-top-pages/buddy': typeof AppTabTopPagesBuddyRoute
  '/_app/_tab-top-pages/dashboard': typeof AppTabTopPagesDashboardRoute
  '/_app/_tab-top-pages/diary': typeof AppTabTopPagesDiaryRoute
  '/_app/_tab-top-pages/settings': typeof AppTabTopPagesSettingsRoute
  '/_app/_tab-top-pages/todo': typeof AppTabTopPagesTodoRoute
  '/_app/diary/new': typeof AppDiaryNewRoute
  '/_app/todo/$taskId': typeof AppTodoTaskIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/register'
    | '/login'
    | '/register/buddy-name'
    | '/register/clothes'
    | '/register/color'
    | '/register/hair'
    | '/register/nickname'
    | '/buddy'
    | '/dashboard'
    | '/diary'
    | '/settings'
    | '/todo'
    | '/diary/new'
    | '/todo/$taskId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/register'
    | '/login'
    | '/register/buddy-name'
    | '/register/clothes'
    | '/register/color'
    | '/register/hair'
    | '/register/nickname'
    | '/buddy'
    | '/dashboard'
    | '/diary'
    | '/settings'
    | '/todo'
    | '/diary/new'
    | '/todo/$taskId'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_auth'
    | '/register'
    | '/_app/_tab-top-pages'
    | '/_auth/login'
    | '/register/buddy-name'
    | '/register/clothes'
    | '/register/color'
    | '/register/hair'
    | '/register/nickname'
    | '/_app/_tab-top-pages/buddy'
    | '/_app/_tab-top-pages/dashboard'
    | '/_app/_tab-top-pages/diary'
    | '/_app/_tab-top-pages/settings'
    | '/_app/_tab-top-pages/todo'
    | '/_app/diary/new'
    | '/_app/todo/$taskId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  RegisterRoute: typeof RegisterRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  RegisterRoute: RegisterRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/_auth",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/_tab-top-pages",
        "/_app/diary/new",
        "/_app/todo/$taskId"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login"
      ]
    },
    "/register": {
      "filePath": "register.tsx",
      "children": [
        "/register/buddy-name",
        "/register/clothes",
        "/register/color",
        "/register/hair",
        "/register/nickname"
      ]
    },
    "/_app/_tab-top-pages": {
      "filePath": "_app/_tab-top-pages.tsx",
      "parent": "/_app",
      "children": [
        "/_app/_tab-top-pages/buddy",
        "/_app/_tab-top-pages/dashboard",
        "/_app/_tab-top-pages/diary",
        "/_app/_tab-top-pages/settings",
        "/_app/_tab-top-pages/todo"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/register/buddy-name": {
      "filePath": "register/buddy-name.tsx",
      "parent": "/register"
    },
    "/register/clothes": {
      "filePath": "register/clothes.tsx",
      "parent": "/register"
    },
    "/register/color": {
      "filePath": "register/color.tsx",
      "parent": "/register"
    },
    "/register/hair": {
      "filePath": "register/hair.tsx",
      "parent": "/register"
    },
    "/register/nickname": {
      "filePath": "register/nickname.tsx",
      "parent": "/register"
    },
    "/_app/_tab-top-pages/buddy": {
      "filePath": "_app/_tab-top-pages/buddy.tsx",
      "parent": "/_app/_tab-top-pages"
    },
    "/_app/_tab-top-pages/dashboard": {
      "filePath": "_app/_tab-top-pages/dashboard.tsx",
      "parent": "/_app/_tab-top-pages"
    },
    "/_app/_tab-top-pages/diary": {
      "filePath": "_app/_tab-top-pages/diary.tsx",
      "parent": "/_app/_tab-top-pages"
    },
    "/_app/_tab-top-pages/settings": {
      "filePath": "_app/_tab-top-pages/settings.tsx",
      "parent": "/_app/_tab-top-pages"
    },
    "/_app/_tab-top-pages/todo": {
      "filePath": "_app/_tab-top-pages/todo.tsx",
      "parent": "/_app/_tab-top-pages"
    },
    "/_app/diary/new": {
      "filePath": "_app/diary/new.tsx",
      "parent": "/_app"
    },
    "/_app/todo/$taskId": {
      "filePath": "_app/todo/$taskId.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
