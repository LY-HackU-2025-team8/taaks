openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- description: Generated server url
  url: http://localhost:8080
tags:
- description: Buddy management APIs
  name: Buddy
paths:
  /buddy:
    get:
      description: Retrieves the buddy information for the authenticated user.
      operationId: getBuddy
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuddyResponse"
          description: Successfully retrieved buddy information
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Buddy not found
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      summary: Get buddy information
      tags:
      - Buddy
    put:
      description: Creates or updates the buddy information for the authenticated
        user.
      operationId: upsertBuddy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BuddyRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuddyResponse"
          description: Successfully updated buddy information
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BuddyResponse"
          description: Successfully created buddy information
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid request body
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      summary: Create or update buddy information
      tags:
      - Buddy
  /days/today:
    get:
      operationId: todaySummary
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DayResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - days-controller
  /days/{day}:
    get:
      operationId: diarySummary
      parameters:
      - in: path
        name: day
        required: true
        schema:
          type: string
          format: date
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DayResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - days-controller
  /diaries:
    get:
      operationId: diariesGet
      parameters:
      - description: Zero-based page index (0..N)
        in: query
        name: page
        required: false
        schema:
          type: integer
          default: 0
          minimum: 0
      - description: The size of the page to be returned
        in: query
        name: size
        required: false
        schema:
          type: integer
          default: 10
          minimum: 1
      - description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        in: query
        name: sort
        required: false
        schema:
          type: array
          default:
          - "id,ASC"
          items:
            type: string
      - in: query
        name: date_eq
        required: false
        schema:
          type: string
          format: date
      - in: query
        name: date_gt
        required: false
        schema:
          type: string
          format: date
      - in: query
        name: date_lt
        required: false
        schema:
          type: string
          format: date
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageDiaryResponse"
          description: Successfully retrieved diaries
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      summary: Get diaries
      tags:
      - diaries-controller
    post:
      operationId: diariesPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiaryRequest"
        required: true
      responses:
        "201":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DiaryResponse"
          description: Diary created successfully
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      summary: Create a new diary
      tags:
      - diaries-controller
  /diaries/{id}:
    delete:
      operationId: diariesIdDelete
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: Diary deleted successfully
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Diary not found
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      summary: Delete a diary by ID
      tags:
      - diaries-controller
    get:
      operationId: diariesIdGet
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DiaryResponse"
          description: Successfully retrieved diary
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Diary not found
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      summary: Get a diary by ID
      tags:
      - diaries-controller
    put:
      operationId: diariesIdPut
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DiaryRequest"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DiaryResponse"
          description: Diary updated successfully
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Diary not found
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      summary: Update a diary by ID
      tags:
      - diaries-controller
  /login:
    post:
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LoginResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - login-controller
  /notification-target-token:
    get:
      operationId: getNotificationTargetTokens
      parameters:
      - in: query
        name: page
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - in: query
        name: size
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageNotificationTargetTokenResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - notification-target-token-controller
    post:
      operationId: createNotificationTargetToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationTargetTokenRequest"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/NotificationTargetTokenResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - notification-target-token-controller
  /notification-target-token/{id}:
    get:
      operationId: getNotificationTargetToken
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/NotificationTargetTokenResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - notification-target-token-controller
  /tasks:
    get:
      operationId: getTask
      parameters:
      - in: query
        name: dueAt_gt
        required: false
        schema:
          type: string
          format: date-time
      - in: query
        name: dueAt_lt
        required: false
        schema:
          type: string
          format: date-time
      - in: query
        name: isAllDay_eq
        required: false
        schema:
          type: boolean
      - in: query
        name: isCompleted_eq
        required: false
        schema:
          type: boolean
      - description: Zero-based page index (0..N)
        in: query
        name: page
        required: false
        schema:
          type: integer
          default: 0
          minimum: 0
      - description: The size of the page to be returned
        in: query
        name: size
        required: false
        schema:
          type: integer
          default: 10
          minimum: 1
      - description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        in: query
        name: sort
        required: false
        schema:
          type: array
          default:
          - "id,ASC"
          items:
            type: string
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageTaskResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - task-controller
    post:
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - task-controller
  /tasks/{taskId}:
    delete:
      operationId: deleteTask
      parameters:
      - in: path
        name: taskId
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - task-controller
    get:
      operationId: getTaskDetail
      parameters:
      - in: path
        name: taskId
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - task-controller
    put:
      operationId: updateTask
      parameters:
      - in: path
        name: taskId
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TaskResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - task-controller
  /users:
    post:
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistrationRequest"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LoginResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - taak-user-controller
  /users/me:
    delete:
      operationId: deleteAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteAccountRequest"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GenericMessageResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - taak-user-controller
    get:
      operationId: userInfo
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UsersResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - taak-user-controller
  /users/me/password:
    patch:
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GenericMessageResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - taak-user-controller
  /users/me/username:
    patch:
      operationId: changeUsername
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeUsernameRequest"
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UsersResponse"
          description: OK
        default:
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: exception
      tags:
      - taak-user-controller
components:
  schemas:
    BuddyRequest:
      type: object
      properties:
        clothesId:
          type: integer
          format: int64
        colorId:
          type: integer
          format: int64
        hairStyleId:
          type: integer
          format: int64
        name:
          type: string
        nickname:
          type: string
      required:
      - clothesId
      - colorId
      - hairStyleId
      - name
      - nickname
    BuddyResponse:
      type: object
      properties:
        clothesId:
          type: integer
          format: int64
        colorId:
          type: integer
          format: int64
        createdAt:
          type: string
          format: date-time
        hairStyleId:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        name:
          type: string
        nickname:
          type: string
        updatedAt:
          type: string
          format: date-time
    ChangePasswordRequest:
      type: object
      properties:
        newPassword:
          type: string
        oldPassword:
          type: string
    ChangeUsernameRequest:
      type: object
      properties:
        newUsername:
          type: string
    DayResponse:
      type: object
      properties:
        date:
          type: string
          format: date
        loadScore:
          type: integer
          format: int64
    DeleteAccountRequest:
      type: object
      properties:
        password:
          type: string
    DiaryRequest:
      type: object
      properties:
        body:
          type: string
          example: たくさんコードを書いた
        date:
          type: string
          format: date
          example: 2025-05-18
        title:
          type: string
          example: プログラミング
      required:
      - body
      - date
      - title
    DiaryResponse:
      type: object
      properties:
        body:
          type: string
          example: たくさんコードを書いた
        date:
          type: string
          format: date
          example: 2025-05-18
        id:
          type: integer
          format: int32
          example: 123
        title:
          type: string
          example: プログラミング
      required:
      - body
      - date
      - id
      - title
    ErrorResponse:
      type: object
      description: エラー時のレスポンス
      properties:
        message:
          type: string
      required:
      - message
    GenericMessageResponse:
      type: object
      properties:
        message:
          type: string
      required:
      - message
    LoginRequest:
      type: object
      properties:
        password:
          type: string
        username:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: "#/components/schemas/UsersResponse"
      required:
      - token
      - user
    NotificationTargetTokenRequest:
      type: object
      properties:
        target_token:
          type: string
          minLength: 1
      required:
      - target_token
    NotificationTargetTokenResponse:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        targetToken:
          type: string
        updatedAt:
          type: string
          format: date-time
        userId:
          type: integer
          format: int64
      required:
      - createdAt
      - id
      - targetToken
      - updatedAt
      - userId
    PageDiaryResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/DiaryResponse"
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        size:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    PageNotificationTargetTokenResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/NotificationTargetTokenResponse"
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        size:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    PageTaskResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/TaskResponse"
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        size:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        sort:
          $ref: "#/components/schemas/SortObject"
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    TaskRequest:
      type: object
      properties:
        completedAt:
          type: string
          format: date-time
        dueAt:
          type: string
          format: date-time
        isAllDay:
          type: boolean
        loadScore:
          type: integer
          format: int32
        memo:
          type: string
        scheduledAt:
          type: array
          items:
            type: string
            format: date-time
        title:
          type: string
    TaskResponse:
      type: object
      properties:
        completedAt:
          type: string
          format: date-time
        dueAt:
          type: string
          format: date-time
        id:
          type: integer
          format: int32
        isAllDay:
          type: boolean
        loadScore:
          type: integer
          format: int32
        memo:
          type: string
        scheduledAt:
          type: array
          items:
            type: string
            format: date-time
        title:
          type: string
      required:
      - dueAt
      - id
      - isAllDay
      - loadScore
      - memo
      - scheduledAt
      - title
    UserRegistrationRequest:
      type: object
      properties:
        password:
          type: string
        username:
          type: string
    UsersResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
      required:
      - id
      - username
