spring.application.name=taak
# use postgres written in compose.yml
spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/taak
spring.datasource.username=${DB_USER:taak}
spring.datasource.password=${DB_PASSWORD:taak}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update

# spring batch
spring.sql.init.mode=always
spring.batch.jdbc.initialize-schema=always
# spring.sql.init.schema-locations=classpath:org/springframework/batch/core/schema-postgresql.sql

# # DDL generation
# # This will generate the schema.sql file in the root of the project
# spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
# spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=schema.sql
# spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
# # Prevent schema.sql from being appended to on every build
# spring.jpa.properties.hibernate.hbm2ddl.schema-generation.script.append=false
# # This will create tables in the database if they do not already exist
# spring.jpa.properties.javax.persistence.schema-generation.database.action=update

#jwt secret
jwt.secret=${JWT_SECRET:secret}

#springdoc
springdoc.api-docs.path=/api/docs
springdoc.swagger-ui.path=/api/swagger-ui
springdoc.writer-with-order-by-keys=true
